//lc-516
class Solution {
    public int longestPalindromeSubseq(String s) {
        int n=s.length();//string for col
        int dp[][]=new int[n+1][n+1]; //dp of n+1 size
        StringBuilder sb=new StringBuilder(s);
        String rev=sb.reverse().toString();//reverse string for row
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<n+1;j++)
            {
                if(i==0 || j==0) //fill row 0 col 0 with 0
                {
                    dp[i][j]=0;
                }
                else 
                {
                    if(rev.charAt(i-1)==s.charAt(j-1)) //if matches
                    {
                        dp[i][j]=dp[i-1][j-1]+1; //diagonal+1
                    }
                    else
                    {
                        dp[i][j]=Math.max(dp[i][j-1],dp[i-1][j]); //max of left and top
                    }
                }
            }
        }
        return dp[n][n];
    }
}
