//lc-322
//coin change
class Solution {
    public int coinChange(int[] coins, int amount) {
        //edge case
        if(amount<0)
        {
            return 0;
        }
        int dp[]=new int[amount+1];
        //minimum coins needed to make 1 rupee to given amount
        for(int i=1;i<=amount;i++) 
        {
            dp[i]=Integer.MAX_VALUE;
            for(int coin:coins)
            {
                //coin<=i We can only use coin if its value is not bigger than sub-amount
                //dp[i-coin] is max means sub-amount i - coin can't be made with given coins
                if(coin<=i && dp[i-coin]!=Integer.MAX_VALUE)
                {
                    dp[i]=Math.min(dp[i],1+dp[i-coin]);
                    //1+dp[i-coin] for current coin and remaining coins needed
                }
            }
        }
        //amount cannot be made from given coins
        if(dp[amount]==Integer.MAX_VALUE)
        {
            return -1;
        }
        return dp[amount];

        // //won't work (greedy approach)
        // int count=0;
        // Arrays.sort(coins);
        // for(int i=coins.length-1;i>=0;i--)
        // {
        //     while(amount>=coins[i])
        //     {
        //         amount-=coins[i];
        //         count++;
        //     }
        // }
        // return (amount==0)?count:-1;
    }
}
