//lc-47
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        Arrays.sort(nums);
        List<Integer> curr=new ArrayList<>();
        boolean visited[]=new boolean[nums.length];
        backtrack(nums,visited,curr,res);
        return res;
    }
    public void backtrack(int nums[],boolean visited[],List<Integer> curr,List<List<Integer>> res)
    {
        if(curr.size()==nums.length)
        {
            res.add(new ArrayList<>(curr));
            return;
        }
        for(int i=0;i<nums.length;i++)
        {
            // Skip already used elements
            if(visited[i])
            {
                continue;
            }
            // Skip duplicates: if same as previous and previous not used
            if(i>0 && nums[i]==nums[i-1] && !visited[i-1])  
            {
                continue;
            }
            visited[i]=true;
            curr.add(nums[i]);
            backtrack(nums,visited,curr,res);
            curr.remove(curr.size()-1);
            visited[i]=false;
        }
    }
}
