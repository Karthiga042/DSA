import java.util.Random;

public class QuickSortWithExplanation {

    public static void main(String[] args) {
        int[] arr = {5, 2, 8, 1, 3};

        System.out.println("Original array:");
        printArray(arr);

        // Call quick sort
        quickSort(arr, 0, arr.length - 1);

        System.out.println("\nSorted array:");
        printArray(arr);
    }

    // Recursive quick sort function
    public static void quickSort(int[] arr, int start, int end) {
        if (start < end) {
            // Step 1: Pick a random pivot index
            //The index you choose initially as the pivot
            int pivotIndex = getRandom(start, end);

            // Step 2: Move the pivot element to the end for easy partitioning
            swap(arr, pivotIndex, end);

            // Step 3: Partition the array and get pivot's final index
            //	The index where the pivot finally ends up after partitioning â€” its correct position in sorted order
            int correctPivotIndex = partition(arr, start, end);

            // Step 4: Recursively sort the left and right parts
            quickSort(arr, start, correctPivotIndex - 1); // Sort left sub-array
            quickSort(arr, correctPivotIndex + 1, end);   // Sort right sub-array
        }
    }

    // Partition function
    public static int partition(int[] arr, int start, int end) {
        int pivot = arr[end]; // The pivot is now at the end

        // Initialize i to one position before the start bcoz no smaller element found initially
        int i = start - 1;

        // Traverse all elements from start to end - 1
        for (int j = start; j < end; j++) {
            if (arr[j] < pivot) {
                // If current element is less than pivot:
                // Move the boundary for smaller elements
                i++;

                // Swap current element with the element at boundary
                swap(arr, i, j);
            }
        }

        // After loop, place the pivot in its correct position bcoz i is the last smaller element less than pivot
        swap(arr, i + 1, end);

        // Return the final index of pivot
        return i + 1;
    }

    // Swap function to swap elements at two indices
    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Function to get a random index between start and end (inclusive)
    public static int getRandom(int start, int end) {
        Random rand = new Random();
        return rand.nextInt(end - start + 1) + start;
//Random number from 0 to (end - start) + start	Shift the range from start
    }

    // Function to print the array
    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}
