public class MergeSortSimple {

    // Merge Sort main function
    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            // Find the middle point
            int mid = (left + right) / 2;

            // Sort first half
            mergeSort(arr, left, mid);
            // Sort second half
            mergeSort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }

    // Merge two sorted subarrays
    public static void merge(int[] arr, int left, int mid, int right) {
        // Sizes of two subarrays
        int n1 = mid - left + 1; //size of left subarray
        int n2 = right - mid; //size of right subarray

        // Create temporary arrays
        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        // Copy data into temp arrays
        for (int i = 0; i < n1; i++)
            leftArr[i] = arr[left + i]; // Starts at 'left'
        for (int j = 0; j < n2; j++)
            rightArr[j] = arr[mid + 1 + j]; // Starts at 'mid + 1'

        // Merge temp arrays back into original array by sorting 
        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements (if any)
        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    // Main method to test the sort
    public static void main(String[] args) {
        int[] arr = {5, 2, 8, 1, 3};

        mergeSort(arr, 0, arr.length - 1);

        // Print the sorted array
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
