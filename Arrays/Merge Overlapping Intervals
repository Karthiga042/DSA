//gfg
//Overlapping Intervals
class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        // Code here
        
        //if 1 interval no need to merge
        if(arr.length<=1)
        {
            return Arrays.asList(arr);
        }
        
        //sort interval based on starting time
        Arrays.sort(arr,(a,b)->Integer.compare(a[0],b[0]));
        
        //to store merged intervals
        List<int[]> merged=new ArrayList<>();
        
        int current[]=arr[0];
        merged.add(current);
        
        for(int i=1;i<arr.length;i++)
        {
            int nextStart=arr[i][0];
            int nextEnd=arr[i][1];
            
            //if next starting time <= current ending time intervals overlap
            if(nextStart<=current[1])
            {
                //set current ending time as max of current end and next end for merging
                current[1]=Math.max(current[1],nextEnd);
            }
            else //If the next interval does not overlap
            {
                //treat it as seperate group of interval and add to current for next check
                current=arr[i];
                merged.add(current);
            }
        }
        return merged;
    }
}
